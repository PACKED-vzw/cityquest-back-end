"use strict";

// todo: make less global
var origin = document.location.origin;
var partialPath = origin + "/partials";


var app = angular.module('cityquest', ['ImageCropper', 'ui.sortable', 'ui.router', 'leaflet-directive', 'ngQuill'])
    .config(function($interpolateProvider){
        $interpolateProvider.startSymbol('{[').endSymbol(']}');
    }

);

app.directive('imagePicker', function () {
    return {
        restrict: 'E',
        templateUrl: partialPath + '/image-picker.html'
    };
});

app.directive('imageModal', function (){
    return {
        restrict: 'A',

        link: function ($scope, element, attrs) {

            element.bind('click', function () {
                //$scope.cropping = true;

                var modalElement = attrs.imageModal;
                var imageElement = attrs.imageElement; // data to be written to
                var docHeight = $(document).height();

                $("body").append("<div id='overlay' ng-show='{[cropping]}'></div>");
                $("#overlay")
                    .height(docHeight)
                    .css({
                        'opacity' : 0.4,
                        'position': 'fixed',
                        'top': 0,
                        'left': 0,
                        'background-color': 'black',
                        'width': '100%',
                        'z-index': 5000
                    });


                // moet dit wel in directive of in module ?
                $("#overlay, .crop-image").on('click', function(){

                    // todo: dit is ellendig maar later via propere api manier proberen oplossen ...
                    //$(this).remove();
                    $('#overlay').remove();
                    $('.modal').css('display', 'none');



                });

                $(modalElement).css('display','block');
            });

        }
    }
});


// https://github.com/Fundoo-Solutions/angularjs-autosave
app.directive('autoSave', ['$interval',
        function($interval) {
            return {
                restrict: 'A',
                require: 'form',
                link: function($scope, $element, $attrs) {
                    var latestModel = null;
                    var autoSaveModel = $scope.$eval($attrs.autoSaveModel);
                    var hasModel = !!autoSaveModel;
                    var autoSaveFn = $scope.$eval($attrs.autoSaveFn);
                    var autoSaveMode = $attrs.autoSaveMode;
                    var autoSaveInterval = $scope.$eval($attrs.autoSaveInterval) * 1;
                    latestModel = angular.copy(autoSaveModel);
                    var intervalPromise = null;

                    function blurHandler() {
                        $scope.$apply(function() {
                            autoSaveFn();
                        });
                    }

                    if(autoSaveMode === 'interval') {
                        intervalPromise = $interval(function() {
                            autoSaveModel = $scope.$eval($attrs.autoSaveModel);
                            if(!hasModel || !angular.equals(latestModel, autoSaveModel)) {
                                latestModel = angular.copy(autoSaveModel);
                                autoSaveFn();
                            }
                        }, autoSaveInterval);
                    } else if (autoSaveMode === 'blur') {
                        $element.find('input').on('blur', blurHandler);
                    }

                    $element.on('$destroy', function(event) {
                        if(intervalPromise) {
                            $interval.cancel(intervalPromise);
                        }
                        if (autoSaveMode === 'blur') {
                            $element.find('input').off('blur', blurHandler);
                        }
                    });
                }
            }
        }
    ]);


app.config(function ($stateProvider, $urlRouterProvider) {

    $stateProvider
        .state('quest', {
            url: '/quest/:questId',
            templateUrl: partialPath + '/quest.html',
            controller: 'MainCtrl'
        })
        .state('printqr', {
            url: '/printqr/:questId',
            templateUrl: partialPath + '/print.html',
            controller: 'PrintCtrl'
        });


    // if none of the above states are matched, use this as the fallback
    $urlRouterProvider.otherwise('/quest');

});


app.controller('PrintCtrl', function ($scope, $rootScope){

    $scope.quest = $rootScope.quest;
    $scope.size = 200;

    $scope.increaseSize = function(){
        $scope.size += 50;
    }
    $scope.decreaseSize = function(){
        $scope.size -= 50;
    }
    $scope.print = function(){
        window.print();
    }
});



app.controller('MainCtrl', function ($scope, $rootScope, $stateParams, $state, $http, $anchorScroll, $location) {
    // all functions which need to run at startup
    $scope.init = function(){
        $scope.statuses = {}

        if(typeof $scope.startpointCenter == 'undefined'){

            $scope.startpointCenter = {
                lat: 0,
                lng: 0,
                zoom: 15
            };

            $scope.startpointMarkers =  {
                marker: {
                    lat: 0,
                    lng: 0,
                    focus: true,
                    draggable: false
                }
            };

            $scope.endpointCenter = {
                lat: 0,
                lng: 0,
                zoom: 15
            };

            $scope.endpointMarkers =  {
                marker: {
                    lat: 0,
                    lng: 0,
                    focus: true,
                    draggable: false
                }
            };
        }
        if(typeof $stateParams.questId != 'undefined') {
            $scope.zoomLevelStatic = 5;
            $scope.loadQuest();
        }
    }
    $scope.init();


    $scope.publish = function(){
        $http({
            method: 'POST',
            url: Routing.generate ("cityquest_publish", {id: $scope.quest.details.id })
        }).success (function(data, status, headers){
            if(data.published === true){
                $scope.published = true;
            }
            else {
                $scope.published = false;
            }
            });

    }

    $scope.updateStaticMap = function(){
        $scope.staticImage =  "https://maps.googleapis.com/maps/api/staticmap?center="+ $scope.coordinates['startpoint'].lat + ","+ $scope.coordinates['startpoint'].lng  +"&zoom="+ $scope.zoomLevelStatic +"&size=300x400&maptype=roadmap &markers=color:blue%7Clabel:S%7C"+ $scope.coordinates['startpoint'].lat + ","+ $scope.coordinates['endpoint'].lng  +"&markers=color:green%7Clabel:G%7C"+ $scope.coordinates['endpoint'].lat + ","+ $scope.coordinates['startpoint'].lng  +"";
    }

    $scope.zoomStaticMap = function(value){
        $scope.zoomLevelStatic += value;
        $scope.updateStaticMap();
    }

    $scope.setLocation = function(location, marker, center){
        $scope[center] = {
            lat: $scope.coordinates[location].lat,
            lng: $scope.coordinates[location].lng,
            zoom: 15
        };

        $scope[marker] =  {
            marker: {
                lat: $scope.coordinates[location].lat,
                lng: $scope.coordinates[location].lng,
                focus: true,
                draggable: false
            }
        };

        $scope.updateStaticMap();
    }


    $scope.resetLocation = function(location){
        $scope.coordinates[location] = {
            lat: 0,
            lng: 0,
            address: ""
        }
        $scope.setLocation(location, location + 'Markers', location + 'Center')
        $scope.updateStaticMap();
    }


    $scope.uploadImage = function(){
        $http({
            method: 'POST',
            url: Routing.generate ("cityquest_upload_image", {id: $scope.quest.details.id }),
            data: "image=" + $scope.imageCropResult,
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        });
    };


    console.log("quest id");
    console.log($stateParams.questId);

    // Angular aleady runs without $stateParams being set ...

    if(typeof $scope.items == "undefined" ){
        $scope.items = new Array();
    }


    $scope.details = {
    };

    $scope.panes = {
        // show details pane
        details: true,
        // hide items pane
        items: false,
        cropper: true
    };

    // toggle panes
    $scope.togglePane = function(pane){
        $scope.panes[pane] = !$scope.panes[pane];
    };

    $scope.goToPrintPage = function(){
        $scope.saveDetails();
        $rootScope.quest = $scope.quest;


        $state.go('printqr',{ questId: $scope.quest.details.id });
    };

    $scope.saveItems = function(){
        $http({
            method: 'POST',
            url: Routing.generate ("cityquest_api_update", {id: $scope.quest.details.id }),
            data: "data=" + JSON.stringify($scope.quest.details),
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        });
    }

    $scope.saveQuest = function(){
        $scope.saveDetails();
        alert('Quest saved');
    };

    $scope.saveDetails = function(){
        $http.defaults.headers.post["Content-Type"] = "application/x-www-form-urlencoded";

        $scope.quest.details.map.zoomLevel = $scope.zoomLevelStatic;
        $scope.quest.details.image = $scope.imageCropResult;
        $scope.quest.details.map = {};
        if (typeof ($scope.coordinates) != 'undefined') {
            $scope.quest.details.map.startpoint = $scope.coordinates.startpoint;
            $scope.quest.details.map.endpoint = $scope.coordinates.endpoint;
        }
        $scope.quest.details.items = $scope.items;
        $scope.quest.details.map.zoomLevel = $scope.zoomLevelStatic;
        
        $scope.uploadImage();
	//console.log (JSON.stringify ($scope.quest.details));

        // set order
        for(var i = 0, length = $scope.quest.details.items.length; i < length; i++){
            $scope.quest.details.items[i].order = $scope.quest.details.items.indexOf($scope.quest.details.items[i]);
        }
        console.log ($scope.quest.details.items);



        $http({
            method: 'POST',
            url: Routing.generate ("cityquest_api_update", {id: $scope.quest.details.id }),
            data: "data=" + JSON.stringify($scope.quest.details),
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        });

    };

    $scope.loadQuest = function(){
        $http.get(Routing.generate('cityquest_load_quest', {id: $stateParams.questId}))
            .success (function(data, status, headers){
                $scope.quest = data;
		//console.log ('load quest');
		console.log ($scope.quest);
		console.log (typeof ($scope.quest.details.items));
		if (typeof ($scope.quest) == 'object') {
		if (typeof ($scope.quest.details.items) == 'string') {
$scope.items = JSON.parse ($scope.quest.details.items);
		} else {
	$scope.items = $scope.quest.details.items;
}
} else {
                if (typeof ($scope.quest.details.items) != 'undefined' && $scope.quest.details.items.length != 0) {
                    $scope.items = JSON.parse ($scope.quest.details.items);
                } else {
                    $scope.items = [];
                }
}
                $scope.imageFile = $scope.quest.details.imageFile;
                $scope.zoomLevelStatic = parseInt($scope.quest.details.map.zoom, 10);
                $scope.staticImage = $scope.quest.details.map.url;
                /*
                Loop through all items to set item.hint.parent_item so we can delete hints (to prevent breakage for older quests)
                See $scope.deleteHint & $scope.addHint
                 */
                for (var i = 0; i < $scope.items.length; i++) {
                    if (typeof ($scope.items[i].hints) != 'undefined') {
                        for (var j = 0; j < $scope.items[i].hints.length; j++) {
                            if (typeof ($scope.items[i].hints[j].parent_item) == 'undefined') {
                                $scope.items[i].hints[j].parent_item = $scope.items[i].itemid;
                            }
                            if (typeof ($scope.items[i].hints[j].hint_id) == 'undefined') {
                                $scope.items[i].hints[j].hint_id = token();
                            }
                        }
                    }
                }

                $scope.coordinates = {
                    'startpoint': {},
                    'endpoint' : {}
                };

                $scope.coordinates['startpoint'] = $scope.quest.details.map.startpoint;
                $scope.coordinates['endpoint']   = $scope.quest.details.map.endpoint;

                $scope.startpointCenter = {
                    lat: 0,
                    lng: 0,
                    zoom: 15
                };

                $scope.startpointMarkers =  {
                    marker: {
                        lat: 0,
                        lng: 0,
                        focus: true,
                        draggable: false
                    }
                };

                $scope.endpointCenter = {
                    lat: 0,
                    lng: 0,
                    zoom: 15
                };

                $scope.endpointMarkers =  {
                    marker: {
                        lat: 0,
                        lng: 0,
                        focus: true,
                        draggable: false
                    }
                };

                $scope.setLocation('startpoint','startpointMarkers','startpointCenter');
                $scope.setLocation('endpoint','endpointMarkers','endpointCenter');

                $scope.published = data.details.published;
                $scope.updateStaticMap();

            })
            .error (function(){
                console.log('Something went wrong!? This is horrible.');
            })
    };


    // get items
    $scope.loadItems = function(){
        $http.get(Routing.generate( 'cityquest_api_test2'))
            .success(function(data){
                $scope.quest = data;
            })
            .error(function(){
                console.log("Could not load items...");
            });
    };

    /*
    Delete a hint from an item.
    @param object hint
    Uses parent_item, itemid and hint_id to select and delete the right item.
     */
    $scope.deleteHint = function(hint) {
        for (var i = 0; i < $scope.items.length; i++) {
            if ($scope.items[i].itemid == hint.parent_item) {
                for (var j = 0; j < $scope.items[i].hints.length; j++) {
                    if ($scope.items[i].hints[j].hint_id == hint.hint_id) {
                        $scope.items[i].hints.splice (j, 1);
                        break;
                    }
                }
                break;
            }
        }
//        $scope.items[$scope.position].hints.splice($scope.items[$scope.position].hints.indexOf(item), 1);
    };

    /*
    Add a new hint to an item.
    @param object hint
    hint = object (title, description, image, parent_item, hint_id)
     */
    $scope.addHint = function(item){
        var hint = { title: "", description: "", image: "img/parijs.jpg", parent_item: item.itemid, hint_id: token ()};
        item.hints.push(hint);
    };

    /*
    Delete an item from a quest.
    @param object item
    Uses itemid to delete the right item.
     */
    $scope.deleteItem = function(item){
	console.log (item);
        for (var i = 0; i < $scope.items.length; i++) {
            if (item.itemid == $scope.items[i].itemid) {
                $scope.items.splice (i, 1);
                break;
            }
        }
    };

    $scope.showMiniCropContainer = function() {
        $scope.miniCropContainer = !$scope.miniCropContainer;
    }

    $scope.pickImageHint = function(hint, data, index){


        $http({
            method: 'POST',
            url: Routing.generate ("cityquest_convert_base_image", {id: $scope.quest.details.id }),
            data: "base64=" + data,
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        }).success(function(data, status, headers, config) {
                hint.image = data;
                $scope.miniCropper = null;
                $scope.imageStepHint = 1;

        }).
            error(function(data, status, headers, config) {
                // called asynchronously if an error occurs
                // or server returns response with an error status.
            });

        $scope.togglePane('cropcontainer' + index);

    }

    $scope.pickImageItem = function(item, data){
        $http({
            method: 'POST',
            url: Routing.generate ("cityquest_convert_base_image", {id: $scope.quest.details.id }),
            data: "base64=" + data,
            headers: {'Content-Type': 'application/x-www-form-urlencoded'}
        }).success(function(data, status, headers, config) {

            $scope.itemImage = data;
            item.image = data;
            delete item.media;
            delete $scope.itemMedia;

            //reset cropper
            $scope.mediaCropper=null;
            $scope.imageStepMedia=1

        }).
            error(function(data, status, headers, config) {
                // called asynchronously if an error occurs
                // or server returns response with an error status.
            });

    }


    var rand = function() {
        return Math.random().toString(36).substr(2); // remove `0.`
    };

    var token = function() {
        return rand() + rand(); // to make it longer
    };



    $scope.addItem = function (){
        // add first to list
        var item = {};
        item.itemid = token();
        item.title = 'New item';
        item.hints = new Array();
        item.media = '';
        item.qrcode = token();
        // we can edit later
        $scope.items.push(item);
        $scope.editItem(item);
    }


    $scope.updateItem = function(item){
        $scope.items[$scope.position].title = $scope.titleItem;
        //$scope.items[$scope.position].crypticDescription = $scope['crypticDescriptionItem_' + $scope.itemId ];
        $scope.items[$scope.position].crypticDescription = $scope.crypticDescriptionItem;
        //$scope.items[$scope.position].description = $scope['descriptionItem_' + $scope.itemId ];
        $scope.items[$scope.position].description = $scope.descriptionItem;

        //$scope.items[$scope.position].hints = new Array();

        $scope.items[$scope.position].hints =  $scope.hints;
        //item.hints = $scope.hints;
        //$scope.$apply();

        console.log("hints");
        console.log($scope.items[$scope.position]);

    }

    $scope.resetItemImage = function() {
        delete $scope.itemImage;
        delete $scope.items[$scope.position].image;
    }



    $scope.editItem = function(item){
        $scope.openItemId = item.itemid;

        $scope.itemImage = item.image;
        $scope.itemMedia = item.media;
    }

    $scope.showItem = function(item){
        if(item.itemid == $scope.openItemId){
            return true;
        }
        return false;
    }

    $scope.imageCropResult = null;
    $scope.showImageCropper = true;

    $scope.$watch('imageCropResult', function(newVal) {
        if (newVal) {
            console.log('imageCropResult', newVal);
        }

    });

});




app.directive('findPlace', function(){
    return {
        restrict:'A',
        scope: false,
        link: function($scope, element, attrs){
            var autocomplete = new google.maps.places.Autocomplete($('#'+attrs.id)[0], {});
            google.maps.event.addListener(autocomplete, 'place_changed', function() {
                var place = autocomplete.getPlace();
                var key = attrs.findPlace;
                var placeObject = {};
                placeObject.lat = place.geometry.location.lat();
                placeObject.lng = place.geometry.location.lng();
                placeObject.address = place.formatted_address;
                $scope.coordinates[key] = placeObject;
                $scope.setLocation(key, key + 'Markers', key + 'Center');

                $scope.$apply();
            });
        }
    }
});

app.directive('qrcode', ['$window', function($window) {

    var canvas2D = !!$window.CanvasRenderingContext2D,
        levels = {
            'L': 'Low',
            'M': 'Medium',
            'Q': 'Quartile',
            'H': 'High'
        },
        draw = function(context, qr, modules, tile) {
            for (var row = 0; row < modules; row++) {
                for (var col = 0; col < modules; col++) {
                    var w = (Math.ceil((col + 1) * tile) - Math.floor(col * tile)),
                        h = (Math.ceil((row + 1) * tile) - Math.floor(row * tile));

                    context.fillStyle = qr.isDark(row, col) ? '#000' : '#fff';
                    context.fillRect(Math.round(col * tile),
                        Math.round(row * tile), w, h);
                }
            }
        };

    return {
        restrict: 'E',
        template: '<a class="qrcode" style="display: table;"><canvas style="' +
        'display: block; max-width: 100%;"></canvas></a>',
        link: function(scope, element, attrs) {
            var domElement = element[0],
                canvas = element.find('canvas')[0],
                link = element.find('a')[0],
                context = canvas2D ? canvas.getContext('2d') : null,
                trim = /^\s+|\s+$/g,
                error,
                version,
                errorCorrectionLevel,
                data,
                size,
                modules,
                tile,
                qr,
                setVersion = function(value) {
                    version = Math.max(1, Math.min(parseInt(value, 10), 10)) || 4;
                },
                setErrorCorrectionLevel = function(value) {
                    errorCorrectionLevel = value in levels ? value : 'M';
                },
                setData = function(value) {
                    if (!value) {
                        return;
                    }

                    data = value.replace(trim, '');
                    qr = qrcode(version, errorCorrectionLevel);
                    qr.addData(data);

                    try {
                        qr.make();
                    } catch(e) {
                        error = e.message;
                        return;
                    }

                    error = false;
                    modules = qr.getModuleCount();
                },
                setSize = function(value) {
                    size = parseInt(value, 10) || modules * 2;
                    tile = size / modules;
                    canvas.width = canvas.height = size;
                },
                render = function() {
                    if (!qr) {
                        return;
                    }

                    if (error) {
                        if (canvas2D) {
                            link.download = '';
                            link.href = '';
                        } else {
                            domElement.innerHTML = '<img src width="' + size + '"' +
                            'height="' + size + '"' +
                            'class="qrcode"' +
                            'style="display: block;' +
                            'max-width: 100%;">';
                        }
                        scope.$emit('qrcode:error', error);
                        return;
                    }

                    if (canvas2D) {
                        draw(context, qr, modules, tile);
                        link.download = 'qrcode.png';
                        link.href = canvas.toDataURL('image/png');
                    } else {
                        domElement.innerHTML = qr.createImgTag(tile, 0);
                        element.find('img')
                            .addClass('qrcode')
                            .css({
                                'display': 'block',
                                'max-width': '100%'
                            });
                    }
                };

            setVersion(attrs.version);
            setErrorCorrectionLevel(attrs.errorCorrectionLevel);
            setSize(attrs.size);

            attrs.$observe('version', function(value) {
                if (!value) {
                    return;
                }

                setVersion(value);
                setData(data);
                setSize(size);
                render();
            });

            attrs.$observe('errorCorrectionLevel', function(value) {
                if (!value) {
                    return;
                }

                setErrorCorrectionLevel(value);
                setData(data);
                setSize(size);
                render();
            });

            attrs.$observe('data', function(value) {
                if (!value) {
                    return;
                }

                setData(value);
                setSize(size);
                render();
            });

            attrs.$observe('size', function(value) {
                if (!value) {
                    return;
                }

                setSize(value);
                render();
            });
        }
    };
}]);
